* Understanding Lisp in Very Little Time

** Caveats: Read this first
  
Lisp is so simple that many people have created their own dialects, each with a
few special features. Fortunately, the various dialects of Lisp are more alike
than they are different. If you have experience with one Lisp it's generally
fast and easy to learn any of the others. The examples we're giving here
are based on the influential and especially elegant (simple yet powerful) Lisp
dialect /Scheme/.

NOTE: This claim to simplicity applies only to /the language itself/. In
practice, you'll be using various libraries which extend the base language with
special types and procedures. You'll need to study the details of any such
features your program is using. While this is true with /any/ programming
language, Lisp allows such libraries to significantly extend Lisp's syntax and
semantics: For this reason, Lisp is often called /the programmable, programming
language!/

** Lisp uses a lot of Nested Lists!
   
A humorous definition of Lisp:
- *Lisp:* Lots of Irritating Silly Parentheses

Let's compare Lisp with popular languages using /algebraic syntax/
- e.g. Java, JavaScript, C, Python, Rust, etc.

- Instead of =a + b + c + d=
- Lisp says =(+ a b c d)=

- Instead of =f(a,b,c)= and =f(a,g(b,c),d)=
- Lisp says =(f a b c)= and =(f a (g b c) d)=

Is the Lisp notation more complex? Most programmers say that after a few days of
experience they find Lisp's simple syntax as clear and pleasant as the
/algebraic syntaxes/ of most other popular languages. Do you find that credible?

** Lisp Syntax

/Syntax/ defines what a language looks like, not what it does. Syntax is
therefore relatively superficial. Lisp has the simplest syntax of any popular
modern language. Once you learn it, you're unlikely to ever forget it.

Lisp Programs are made out of *Symbolic Expression* defined as follows:

*Atom:* Anything /NOT/ a /List/
- Atoms can be simple, e.g. a character or an integer
- Or complex, e.g. /string/, /array/, /struct/, etc.
*Symbolic Expression aka S-Expr:* Either
- An /Atom/
- A /List/ of /Symbolic Expressions/

Parentheses are used to enclose /Lists/.

Each kind of /Atom/ has its own syntax.
- You can add new atom types!
- e.g. /Racket Slideshow/ adds atoms which are /pictures/.

** Lisp Semantics: =eval=, =apply=

Semantics defines what code means and what happens when the computer evaluates
(i.e. runs or executes) it. The Semantics of a language is the big deal. Lisp
has the simplest semantics of any popular modern language. Once you learn it,
you're unlikely to ever forget it.

Lisp evaluates your S-Exprs using the procedures =eval= and =apply= in the
context of /an Environment/.

- *Symbol:* An Atom which serves as an /identifier/, i.e. a name for a value
- *Value:* An /S-Expr/ which can be /returned/ from a /procedure/
- *Binding:* A /symbol/ "bound to" (paired with) a /value/
- *Environment:* a set of /Bindings/, which works like a /dictionary/

*Evaluation:* =eval= evaluates an /S-Expr/ returning a /Value/

*Evaluating* /Atoms/:
- *Symbols:* =eval= returns value from environment /or signals error if none/
- *All other atoms:* Simply evaluate to themselves

*Evaluable Lists are called Forms*

*Evaluating* /Regular Forms/:
- /All Elements/ of /Regular Forms/ are /evaluated/
      - /recursively when nested/
- The /first element/ must evaluate to a procedure /or an error is signaled/
- Then =apply= calls the procedure with the other elements as /arguments/
      - Arguments must be suitable values for the corresponding parameters
 
*Special Forms evaluate their arguments selectively*
- Each is a special case, known to =eval= by /symbol/
- Only 3 are needed, but see /Form Macros/ below

=quote=: suppresses evaluation of its single argument
      - =(quote ANY-SEXPR)= evaluates to =ANY-SEXPR=
      - e.g. =(quote (+ 1 2 3))= evaluates to the list =(+ 1 2 3)= /not/ to =6=!
=(if TEST IF-TRUE IF-FALSE)= evaluates =TEST=, then either =IF-TRUE= or =IF-FALSE=
      - =TEST=: an S-Expr which evaluates to a /Boolean/ aka /truth/ Value
      - The atom =#f= is the /Boolean Value/ for /false/
            - all other S-Exprs are considered /true/
            - the atom =#t= is the /canonical/ Boolean Value for /true/
      - thus =(if TEST IF-TRUE IF-FALSE)=
            - evaluates =TEST=
            - evaluates =IF-TRUE= if =TEST= is /true/, i.e. anything other than =#f=
            - evaluates =IF-FALSE= if =TEST= is /false/, i.e. is =#f=
=(lambda PARAMETERS BODIES)= creates a procedure
      - when the procedure is called ::
            - an /argument value/ must be supplied for each of the /PARAMETERS/
            - each of the /PARAMETERS/ will be /bound/ to the corresponding /argument/
            - BODIES are evaluated in the /environment/ extended with those /bindings/
      - *PARAMETERS:* a list of 0 or more /symbols/
            - or a single /symbol/ which gets /all PARAMETERS/ as a /list/
      - *BODIES:* 1 or more S-Exprs to evaluate.
            - The value of the last body is /returned/ as the value of the
              procedure call

*** A note about Functional Programming
      
Many people in computing use the terms /procedure/ and /function/
interchangeably, but a /functional procedure/ is something special.

*functional procedure:* A /procedure/ which
- returns the same value when given the same argument values
- does not directly or indirectly modify anything outside of itself
- Functional Procedures are simpler, leading to fewer errors
  
/Functional Programming/ is programming using only /Functional Procedures/
- Functional Programming is /possible/ in Lisp
- Functional Programming is /not at all required/ in Lisp

Modern Lisp programmers prefer using Functional Procedures 
- Except where it's significantly inconvenient
- Don't worry, you'll catch on!

*** We're done!
    
That's it! That's how Lisp works!

Well, basically, but we have a few more features which extend Lisp's power.

** Interactive Lisp uses a (P)REPL

- (P)REPL:* (Prompt) Read Eval Print Loop session
- *You enter:* (+ 1 (* 3 4) 5)
- =eval= calls itself recursively to obtain =(#<procedure:+> 1 12 5)=
- =eval= calls =apply= with #<procedure:+> and =(1 12 5)=
- *The final result is printed:* =18=
- How did =(* 3 4)= become =12=?

(P)REPL Session
- =(quote (+ 1 (* 3 4) 5))=
      - =(+ 1 (* 3 4) 5)=
- =(apply + '(1 2 3 4 5 6))=
      - =21=
- =(map eval '(+ 1 (* 3 4) 5))=
      - =(#<procedure:+> 1 12 5)=
- =( (lambda (x y) (+ (* x x) (* y y)) ) 3 4 )=
      - evaluates =(+ (* x x) (* y y))=
      - in the environment extended with =(x 3) (y 4)=
      - which =eval= turns into =(#<procedure:+> 9 16)=
      - and =apply= turns into =25=

Calls on built-in atomic procedures such as the atoms =#<procedure:+>= and
=#<procedure:*>= will be compiled to inline machine code instructions where
possible and to machine code procedure calls when necessary.

Like everything else in Lisp. /procedures/ are /first class values/, i.e.
- they can be bound to a symbol
- they can be passed to a procedure as an argument
- they can be returned from a procedure as the procedure's computed value

Most Lisps allow programs to be broken up into files which can be separately
/compiled/ into /native code/ and then mixed with /Interactive Lisp/ at the REPL
as part of an /incremental development process/. Lisp development platforms like
/DrRacket/ and /Emacs/ also support this style of development.

** Syntactic Sugar: Form Macros

Like everything to do with syntax, /Syntactic Sugar is superficial/. It might
make a Lisp program prettier, but it doesn't effect what it /does/.

Because Lisp code consists of S-Exprs and Lisp is good at manipulating S-Exprs,
you can write Lisp /Form Macros/ (usually just called Macros) which will
translate fancy forms into compositions of simpler forms. This translation
happens when your program is being /compiled/, i.e. when it's being translated
to your computer's native code.

Compilation to native code allows your program to run as fast as your computer
can go, typically 10 to 50 times faster than a similar uncompiled program can
run, e.g. a similar /Python/ program. Because macros are translated out before
your program runs, they do not slow your program down.

Some examples of what macros can do:

I might want to do multiple things where the syntax only allows one thing, I can
use the =begin= macro:
- =(begin S-EXPR-1 S-EXPR-2 ... S-EXPR-N)=
to evaluate each S-EXPR- in turn and return the value of the last one. This is
just syntactic sugar for
- =( (lambda () S-EXPR-1 S-EXPR-2 ... S-EXPR-N) )=
A lot of Lisp syntactic sugar is just disguised /lambdas/!
- See [[lambda-sugar.rkt][Lambda Sugar]] for more examples.
Lambda is the /most/ important Lisp feature!

Really, go read [[lambda-sugar.rkt][Lambda Sugar]] right now before reading any further!

Macros can build on macros, so if I want to do several things, but only when
some condition is true, I use the =when= macro:
- =(when some-condition S-EXPR-1 S-EXPR-2 ... S-EXPR-N)=
- translates into =(if some-condition (begin S-EXPR-1 S-EXPR-2 ... S-EXPR-N) #f)=
- where again, =#f= is the Lisp atom for /false/.

Lisp purists suggest that programmers use macros /sparingly/. Although macros
don't slow programs down and can make programs prettier, they put a burden on
anyone reading the program later, since they have to understand what the macro
does in order to understand what the program is doing.

** Syntactic Sugar: Reader Macros

Lisp reads your Lisp code using the Lisp function =read=. You can arbitrarily
change Lisp's syntax by redefining or extending the =read= function! The Lisp
=print= function prints Lisp values in a form that makes sense for humans to
read /and/ a form which can be read back into your Lisp session with =read=. If
you change =read= or =print= you should change both of them so that this
symmetry is maintained.

=read= and =print= can extend the syntax of Lisp beyond /s-exprs/.
An example is the reader macro for quote (').
- =read= reads ='S-EXPR=
- as =(quote S-EXPR)=
so we can quote /s-exprs/ more compactly.

Many Lisps provide a version of =print= which can read algebraic syntax, e.g.
reading =a+b+c= as =(+ a b c)= making Lisp look more like other languages. After
using an alternate =read= and =print= which make Lisp look more like the
languages they used before Lisp, nearly all Lisp programmers discover that they
now prefer Lisp's simpler and more consistent syntax!

** Built-In and library-provided atom types and procedures

The last two practical barriers to understanding a Lisp program is that you have
to understand the atoms and procedures which your Lisp provides in its standard
profile and which you import from libraries. When you're studying code written
by others you may have a lot of things to track down in order to understand how
that code works.

Each atom type has a syntax which will be read by the =read= procedure. For
example, /character Strings/ are enclosed in double quotes, with a special
/escape syntax/ for embedded special characters. The various kinds of numbers
generally have the same syntax as other languages, except that many Lisps
include more kinds of numbers, e.g. rationals and complex numbers. The =print=
procedure also has to know that syntax so that it can print them properly. In
Racket's /Slideshow Language/ =print= knows how to print pictures.

In addition to (usually) building in a lot of powerful atom types and procedures
which might be useful in your programs, your Lisp will come with lots of
libraries which bring in new atom types and powerful procedures. You will need
to study the documentation for any built-in features or libraries you use. Your
development environment, e.g. DrRacket or Emacs will usually provide a handy
mechanism for going from any unfamiliar entity in your source code to the place
in your Lisp's documentation which defines that construct or procedure.

** Would you like to learn more?
 
Read [[lisp-systems.org][Lisp Systems]]

Study the [[vis-mce.rkt][Meta-Circular Interpreter]] which defines Lisp in Lisp!

Join a [[https://github.com/GregDavidson/computing-magic][Computing Magic]] study group?

Ask questions!
