* Understanding Lisp in Very Little Time

** tl;dr

We highly recommend reading all of this short and easy document
- but if you just want a quick review
- you can skip to the section *The Full Story in a Nutshell* below

** Read This First

It's much easier to implement Lisp than most other programming languages. This
has led to the /Lisp Curse/: Many individuals and institutions have created their
own dialects of Lisp, each a bit deviant from the others or either of the two
major standards. Fortunately, most dialects of Lisp are more alike than they are
different. If you have experience with one Lisp it's generally easy to learn any
other Lisp. The examples we're giving here are based on the influential and
especially elegant (simple yet powerful) Lisp dialect /Scheme/ as implemented in
the /Racket System/.

NOTE: This claim to simplicity applies only to /the language itself/. In
practice, you'll be using various libraries which extend the base language with
special types and procedures. You'll need to study the details of any such
features your program is using. While this is true with /any/ programming
language, Lisp allows such libraries to significantly extend Lisp's syntax and
semantics: For this reason, Lisp is often called /the programmable, programming
language!/

** Lisp expressions use Nested Lists!

A humorous definition of Lisp:
- *Lisp:* Lots of Irritating Silly Parentheses

Let's compare Lisp with some popular languages which use /algebraic syntax/
- e.g. Java, JavaScript, C, Python, Rust, etc.

- Algebraic operator syntax: =a + b + c + d=
- Lisp: =(+ a b c d)=

- Algebraic function calls: =f(a,b,c)= and =f(a,g(b,c),d)=
- Lisp: =(f a b c)= and =(f a (g b c) d)=
- /Function/ =g= /is nested inside function/ =f= /in both notations./

Is the Lisp notation more complex?
- Lisp Programmers claim that after a few days of experience Lisp's syntax
  becomes as clear and pleasant as /algebraic syntax/
- /Do you find that claim credible?/

A key feature to Lisp syntax is that all Lisp expressions can serve as /both
code and data/, e.g. the Lisp expressions
- =(+ a b c d)=, =(f a b c)= and =(f a (g b c) d)=
can be executed as part of a program or manipulated as data.
- /This feature is sometimes a great advantage!/

** Lisp Syntax

/Syntax/ defines what a language looks like, not what it does. Syntax is
therefore relatively superficial. Lisp has the simplest syntax of any popular
modern language. Once you learn it, you're unlikely to ever forget it.

Lisp Programs are made out of *Symbolic Expressions* defined as follows:

*Atom:* Anything /NOT/ a /List/
- Atoms can be simple, e.g. a character or a number
- Or complex, e.g. /string/, /record/, etc.
*List:* A flexible, extensible sequence of arbitrary elements
- Lisp's /List Syntax/ uses parentheses
*Symbolic Expression aka S-Expr:* Either
- An /Atom/
- A /List/ of /Symbolic Expressions/
      - The empty list: =()=
      - A list of three numbers: =(1 3/4 3.14159 -10+5i)=
      - Another list of 3 elements: =(1 "two" (buckle my shoe))=
            - An integer number, a string and a list of symbols
            - /Note how we can freely nest lists inside of lists/

Each kind of /Atom/ has its own syntax.
- You can add new atom types!
- e.g. [[https://docs.racket-lang.org/quick][Racket Slideshow]] adds atoms which are [[https://docs.racket-lang.org/pict][pictures]].
- You can design the syntax and semantics for a new atom type!

Symbols are atoms which can be used to identify values or which can be used as
values themselves.
- Symbols can be short or long sequences of printable characters
      - except for the special characters ( ) [ ] { } " , ' ` ; # | \
      - or anything which would look like a number.
- Here are seven short symbols: x y n + - * /
- Here are two longer symbols: greet person-name-as-string
- Your symbol spelling should be meaningful to you, Lisp doesn't care!

** Lisp Semantics: =eval=, =apply=

Semantics defines what a /symbolic-expression/ means as /code/, i.e. what
happens when the computer /evaluates/ it. The Semantics of a language is the big
deal. Lisp has the simplest semantics of any popular modern language. Once you
learn it, you're unlikely to ever forget it.

Note: Code can either be directly evaluated by an /interpreter program/
(software) or it can be translated into /machine code/ by a /compiler/ and then
interpreted directly by your CPU (hardware). Lisp systems can use either
approach and typically use both.

*** Environments Supply Context For Evaluation

Lisp evaluates your S-Exprs using the procedures =eval= and =apply= in the
context of /an Environment/

- *Symbol:* An Atom which can serve as a name
- *Value:* An /S-Expr/ which can be /returned/ from a /procedure/
- *Binding:* A /symbol/ "bound to" (associated with) a /value/
- *Environment:* a set of /Bindings/, like a /dictionary/

Here's an example:

#+begin_src racket
  ; Lisp comments follow a ; and are ignored
  ; This is a Racket Program
  #lang racket
  ; Which adds three bindings to the current Environment
  (define advice "Don't Panic!")
  (define answer 42)
  (define shopping '(bread milk))
  ; and then prints those values on separate lines
  (println advice)
  (println answer)
  (println shopping)
#+end_src

The symbols =advice=, =answer= and =shopping= are being used as identifiers.

The symbols =bread= and =milk= are being used as values.

When you run that program, it will print
#+begin_example
Don't Panic!
42
(bread milk)
#+end_example

There are a few other things going on in this example which we'll explain
shortly!

*** How Evaluation Works

The built-in procedures =eval= and =apply= do the work.

The Lisp procedure =eval= takes an /S-Expr/ and returns its /Value/.

There are two rules for atoms (non-lists):

*Symbols:* =eval= returns value from environment /or signals error if none/

*All other atoms:* =eval= returns the atom unchanged

*Evaluable Lists* are called *Forms*

*Evaluating Regular Forms*:

1. /All Elements/ of /Regular Forms/ are /evaluated/
       - /recursively when nested/
       - The /first element/ must evaluate to a procedure /or signals an error/
2. =apply= calls the procedure, /applying it/ to the other values
       - the other values from the form serve as /arguments/
       - /Arguments/ must be suitable values for the procedure's corresponding
         /parameters/

*Procedure:* An expression providing /instructions/ a computer can perform,
  often referencing /parameters/ which must be provided with values (arguments)
  when the procedure is executed. Procedures are often called /functions/, but
  more on that later.

That's Lisp Semantics in a Nutshell!

*** An Example Lisp Evaluation

#+begin_src racket
  ; In this Racket Program
  #lang racket
  ; With this procedure
  (define (greet s)
    (string-append "Hello " s ", how are you?") )
  ; The expression
  (greet "Dana")
  ; Evaluates to
  "Hello Dana, how are you?"
#+end_src

Let's explain this example, feature by feature:
       - =(define (greet s) (string-append "Hello " s ", how are you?"))=
             - Creates a procedure bound to the symbol =greet=
             - in the current (/global/ or /top-level/) environment.
             - The symbol =s= will be bound in a local environment when the procedure
               is evaluated.
             - Instead of a short name like =s= you could use something more
               explanatory, like =person-name-as-string=.
                   - Lisp doesn't care what you call things.
                   - There's an art to choosing names which are clear to humans
                     without being annoyingly verbose!
             - Elements in a list are generally separated by /whitespace/
                   - One or more /spaces/, /tabs/ or /newlines/
                   - /whitespace/ around (parentheses) and some other /special
                     characters/ is optional
             - /Pretty-Printing/ makes s-expressions easy to read (with experience)
                   - Using some extra /whitespace/
                   - Complex nested lists broken up over multiple lines
                   - with spaces or tabs showing the nesting level.
       - =(greet "Dana")= 
             1. Each element is evaluated
                    - =greet= evaluates to the procedure we defined
                    - "Dana" evaluates to itself
             2. We =apply= the procedure to the argument(s)
                    1. =apply= creates a temporary nested /local/ environment
                           - =s= is locally bound to "Dana"
                    2. We evaluate =(string-append "hello " s ", how are you?")=
                           1. Each element is evaluated
                                  - string-append= evaluates to a procedure in the string library
                                  - =s= evaluates to "Dana"
                                  - The "string literals" evaluate to themselves
                           2. The library procedure is applied to its three arguments
                                  - "Hello Dana, how are you?" is returned

*** Don't Worry, Just Trust!

Although evaluation proceeds in a nested (recursive) fashion, we don't try to
follow that. When we're reading or writing Lisp code, we follow the principle of
/induction/:
- We consider only one procedure at a time
- We treat any nested procedure calls as /black boxes/
- We trust that the nested calls act according to their documentation
We can open up those /black boxes/ at a later time.

Local environments are nested inside of the environments which enclose them,
creating what we call /scopes/. This idea was invented by Lisp and is now used
by nearly all modern languages. It allows any expression to use any symbol in
any of the enclosing environments as long as the symbol names don't conflict.

For convenience is using procedures as black boxes
- You can lookup library procedures in the [[https://docs.racket-lang.org/reference][Racket Reference Manual]]
- And if you're using the [[https://docs.racket-lang.org/drracket][DrRacket Programming Environment]]
      - put the cursor on the symbol you want to look up and press =F1=

** Special Semantics for Special Forms

Okaaaay, it's not quite that simple - there are exceptions!

/Special Forms/ are Lists beginning with the name of a symbol that looks like it
could be the name of a /procedure/, but instead, it's a marker for special
treatment.

- =eval= has a special rule for each /Special Form/
- Every Lisp has a small number of built-in /Special Forms/
- /Scheme/ has 5 which you need to learn - how about now?

=quote=: suppresses evaluation of its single argument
- =(quote ANY-SEXPR)= evaluates to =ANY-SEXPR=
- e.g. =(quote (+ 1 2 3))= evaluates to =(+ 1 2 3)= /not/ =6=!
- Lisp has a special shorthand syntax for =quote=
- ='ANY-SEXPR= is a shorthand for =(quote ANY-SEXPR)=
- so ='(1 2 3)= is a shorthand for =(quote (1 2 3))=

=(if TEST IF-TRUE IF-FALSE)= evaluates =TEST=, then either =IF-TRUE= or =IF-FALSE=
- =TEST=: an S-Expr which evaluates to a /Boolean truth value/
- The atom =#f= is the /Boolean Value/ for /false/
      - all other S-Exprs are considered /true/
      - the atom =#t= is the /canonical/ Boolean Value for /true/
- thus =(if TEST IF-TRUE IF-FALSE)=
      - evaluates =TEST=
      - evaluates =IF-TRUE= if =TEST= is true, i.e. not =#f=
      - evaluates =IF-FALSE= if =TEST= is false, i.e. =#f=
- so =if= only evaluates two of its three arguments!

=(define SYMBOL VALUE)= binds =SYMBOL= to the given /VALUE/
- in the current /environment/
- Special features of =define=
      - it does NOT evaluate its first argument
            - the SYMBOL is implicitly quoted
      - it does NOT return a normal value
            - you can't use a nested define as an argument
      - In Racket, the definition must be /monotonic/
            - undefined in the current environment

=(set! symbol value)= /changes/ the binding of =symbol= to a new value
- Special features of =set!=
      - it does NOT evaluate its first argument
            - the symbol is implicitly quoted
      - it does NOT return a normal value
            - you can't use a nested define as an argument
      - In Racket, the modification must be /non-monotonic/
            - the symbol must already have a binding
      - Lisp programmers try to avoid /non-monotonic side-effects/!
            - Names of Scheme non-monotonic functions often end with =!=
            - This is intended as a warning!

=(lambda PARAMETERS BODIES)= creates a procedure
- *PARAMETERS:* a list of 0 or more /symbols/
      - or a single /symbol/ which gets /all PARAMETERS/ as a /list/
- *BODIES:* 1 or more S-Exprs to evaluate.
      - The value of the last body is /returned/ as the value of the
        procedure call
- *when the procedure is called*
      - each of the /PARAMETERS/ will require a suitable /argument value/
      - a new nested environment will be created in which
      - the /PARAMETERS/ will be /bound/ to the corresponding /arguments/
      - the BODIES will then be evaluated in that extended environment

** Syntactic Sugar helps in digesting complex code

With apologies to the [[https://www.youtube.com/watch?v=_L4qauTiCY4][musical Mary Poppins]] programming languages often provide
special syntax that isn't strictly necessary but which makes code easier to
read or write.  This is often called /Syntactic Sugar/.

The most obvious piece of /Syntactic Sugar/ you'll see in /Scheme/ programs is
the use of =define= to create procedures.  The example

#+begin_src racket
  #lang racket
  (define (greet s)
    (string-append "Hello " s ", how are you?") )
#+end_src

is using syntacatic sugar.  What's really going on is

#+begin_src racket
  #lang racket
  (define greet (lambda (s)
    (string-append "Hello " s ", how are you?") ))
#+end_src

Properly
- =define= creates a binding in the /current environment/
- =lambda= creates a procedure which is a first-class Lisp value

Lisp is based on the mathematical model of computation called the /Lambda
Calculus/. The most powerful operator in that model is =λ= or =lambda=.

The /Lambda Special Form/ is one of the most powerful features of Lisp. As you
begin to master Lisp you will make more and more use of /Lambda/ and you will
find more instances of [[file:lambda-sugar.rkt][Lambda Sugar]] in Lisp.

One of the most touted features of Lisp is a feature called /Macros/. /Macros/
allow programmers to define new /Special Forms/. This feature should be used
sparingly. Macros can sometimes help abbreviate complex syntax, but they can
also confuse someone trying to understand your program since they alter the
normal Lisp execution mechanism.

** List Supports Functional Programming

Many people in computing use the terms /procedure/ and /function/
interchangeably, but a /functional procedure/ is something special.

*functional procedure:* A /procedure/ which
- returns the same value when given the same argument values
- does not directly or indirectly modify anything outside of itself
- Functional Procedures are simpler, leading to fewer errors

/Functional Programming/ is programming using only /Functional Procedures/
- Functional Programming is /possible/ in Lisp
- Functional Programming is /not at all required/ in Lisp

Modern Lisp programmers prefer using Functional Procedures
- Except where it's significantly inconvenient
- Don't worry, you'll catch on!

** Lisp Supports All Programming Paradigms

There are many ways to go about programming, called /Programming Paradigms/.
Some languages are specialized for a specific Programming Paradigm. Lisp is
designed to be a general purpose language, supporting programming in /any
Programming Paradigm/. The right paradigm can allow you to solve a challenging
problem with ease and elegance. Being fluent in multiple paradigms makes you a
magical programmer.

Check out [[https://www.info.ucl.ac.be/~pvr/paradigms.html][The Principal Programming Paradigms]]. The best way to /learn/ a
paradigm is to do some serious work using a language or toolkit which is
narrowly focused on that paradigm. Once you are well steeped in it, you will
probably want to use that paradigm in conjunction with others in a
multi-paradigm language. The major Lisp implementations, e.g. Racket, Clojure
and Common Lisp are good with all of these paradigms: despite their simplicity,
they are all multi-paradigm languages!

** An Interactive Example Program

Here's an example which you can study and run.

This example contains some library functions that begin adding a capability to
interact with a user.

It also uses a few gratuitous but popular special forms you may want to use in
your own programs.

You can guess how it works, run it and experiment with variations.

When you want to fully understand it, you can look up any of the functions or
special forms in the reference manual as explained above.

#+begin_src racket
    #lang racket
    (define (assess n)
      (printf (if (eq? n 42)
                  "Yes, but why is ~s the answer?\n"
                  "No, ~s is not the answer!\n" ) n ) )
    (define (play)
      (printf "What is the answer? [q to quit] ")
      (let ( [response (read)] )
        (if (eq? response 'q)
            (printf "Thanks for playing, goodbye!\n")
            (begin (assess response)
                   (when (not (eq? response 42)) (play)) ) ) ) )
    (play)
#+end_src

** The Full Story in a Nutshell

After the gentle introduction above, let's put it in a nutshell and also be as
complete as possible.

*** Lisp Syntax

Lisp Programs and Lisp Data consist of Symbolic Expressions.
- A Lisp Program is a sequence of Symbolic Expressions
      - Typically (so not always!) stored in a textfile

Key Terms
- Symbolic Expression ::
      - Either an Atom
      - or a List of Symbolic Expressions
- Atom :: anything other than a List
      - e.g. Symbol, Procedure, Number, String, Vector, Record
- List :: A Sequence of 0 or more Symbolic Expressions
- Regular Form :: a List whose
      - First Element evaluates to a procedure
      - rest of whose elements evaluate to suitable arguments to satisfy that
        procedure's parameters
- Special Form :: a List whose First Element is a Symbol bound to a syntax
  transformer
- Environment :: a set of Bindings paring Symbols with Values
      - e.g. global bindings, procedure parameter/argument bindings

Evaluating A Lisp Program
- Starting with an initial set of Bindings in the Global Environment.
- Evaluates each of its Symbolic Expressions in that Environment.

1. Special Forms are replaced by the result of applying their Syntax Transformer
   procedure on themselves.
       - This is done as early as possible, e.g. at compile time
2. Symbols evaluate to their value in the current Environment
3. All other Atoms evaluate to themselves
4. Regular Forms are evaluated by
- Evaluating each element of the form
- Applying the Procedure obtained from the First Element
- to the Arguments obtained from the Rest of the Elements

*** Source Syntax

When Lisp Code is stored as a sequence of characters in a Text File it can be
read by the Lisp (read) procedure which will read and return a single complete
symbolic expression, i.e. any nested expressions must be included.

The source syntax understood by (read) can be extended, but starts out very
simple.

- Comments begin with a ; and go to the end of the line
      - (read) ignores comments
- Literal lists are enclosed ( in parentheses ) which are self-delimiting
- 'expression is read as (quote expression)
- Whitespace separates expressions and is otherwise ignored
- Atom Types may have a syntax for their literals
- Special syntaxes usually begin with a #

Example Atom Literal Syntaxes
- Symbols :: identifiers spelled with any characters /except/
      - not starting like a number, e.g. with digits or a sign
      - not including whitespece or ( ) [ ] { } " , ' ` ; # | \
- String Literals :: are enclosed in "double quotes"
      - An \escape syntax provided for including special characters in strings
- Numeric Literals :: similar to most programming languages but
      - include rational and complex numbers
      - integers and rationals can have unlimited precision
- Vector Literals :: look like Lists but use #( a hash symbol )

*** Initial Global Environment Bindings

**** Initial Syntax Transformers

- (lambda parameter... body...) :: creates a new procedure which
      - when called with an argument value for each parameter
      - will evaluate each body in a nested environment
            - with the parameters bound to the argument values
      - and will return the value of evaluating the last body
- (quote expression) :: returns expression unevaluated
- (define symbol value) :: binds symbol to value in the current Environment
      - define's first argument is /not evaluated/
      - define is syntactic sugar for a lambda!
- (if conditional-expression then-expression else-expression) ::
      - conditional-expression is evaluated and its value examined
      - if it's false, else-expression is evaluated and its value returned
      - otherwise, then-expression is evaluated and its value returned

**** Initial Atom Procedures

Each Atom Type has a Predicate, a Constructor and Operators

** Would you like to learn more?

You now have a high-level understanding of Lisp.

In order to present the elegant simplicity at the heart of Lisp, this document
skipped over some [[file:lisp-complications.org][Lisp Complications]] which you might want to learn about soon.

Read [[lisp-systems.org][Lisp Systems]]

Study the [[vis-mce.rkt][Meta-Circular Interpreter]] which defines Lisp in Lisp!

Join a [[https://github.com/GregDavidson/computing-magic#readme][Computing Magic]] study group?

Ask questions!
- Post issues on GitHub

Help improve these materials!
- Fork this repository
- Improve your copy of it
- Send us a /pull request/ with your improvements!
