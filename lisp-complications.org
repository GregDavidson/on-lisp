* Lisp Language Complications

** Prerequisites

Before reading this, you should
- Be able to think in Lisp a bit
      - You might study the [[https://github.com/GregDavidson/computing-magic/blob/main/Modules/Module-1/module-1.org][First module of Computing Magic]]
      - based on the excellent [[https://docs.racket-lang.org/quick/index.html][Quick Introduction to Racket]]
- Read [[file:lisp-simplicity.org][lisp-simplicity.org]]

You should understand and appreciate the use of
- Symbolic Expressions as both /Lisp Values/ and /Lisp Code/

** The Key Functions Defining Lisp

*** Lisp Syntax: =read= and =write=

The Syntax which Lisp presents to developers is traditionally implemented by the
two functions =read= and =write=.

If you wanted to add new syntactic features to Lisp
- Determine what /Symbolic Expression/ they should correspond to
      - This is the /Representation Problem/
      - You might even add new /atom types/
- Add code to =read= to translate from the new syntax on input
- Add code to =write= to translate to the new syntax on output

Adding new /atom type/ may require
- writing new procedures to implement new behaviors of your type
- adding new behaviors to existing "generic" procedures
      - i.e. procedures which can handle multiple types
            - =read= and =write= generics for syntax
            - + - * / et al generics for arithmetic on numeric types
                  - integers, floating point, rational, complex, etc.
            - etc.

Many Lisp Systems let you add code to a Procedure as /Advice/
- attach new code to existing Procedure to handle a special cases
- without changing the code of the existing Procedure!
- Fancy Example: [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Advising-Functions.html][Advice System in Emacs Lisp]]

** Lisp Semantics: =eval=, =apply=

There are many strategies for evaluating Lisp code. Mature Lisp Systems often
use a combination of multiple strategies.

*** Dynamic Evaluation of Symbolic Expressions

The /Semantics/ of a Lisp is traditionally /defined/ by the two functions =eval=
and =apply= even if fancier implementation strategies are employed.

- *eval* evaluates a /Symbolic Expression/ representing /Lisp Code/ in a
given Environment and returns the resulting value
- *apply* calls a Procedure with Arguments for its Parameters and Returns the
  Result Value of Evaluating its Body

#+begin_src racket
  (eval '(+ 1 2 3))
  ; returns 6
  (apply + '(1 2 3))
  ; returns 6
#+end_src

A great way to understand Lisp Semantics is to study
- a simple [[file:Lisp-In-Lisp/lisp-in-lisp.rkt][Meta Circular Evaluator]]
- an implementation of Lisp in Lisp!

** Making Lisp Run Faster And More Efficiently

TL;DR: Other than execution speed you should observe no difference at all in the
/behavior/ of your program due to which strategies your Lisp System uses for
interpreting your code. All you should be able to notice (and it might not be
obvious) is the impact of using more computational resources, e.g. processor
time (CPU and GPU), Memory and Input/Output.

Most electronic computer processors have been designed to run imperative code
(typically written in C, Fortran or Assembly Language) efficiently and it's
difficult to get them to efficiently process higher level languages, e.g. Lisps,
Python, Prolog, Smalltalk, JavaScript, Haskell, etc. Yet some Lisp systems allow
the performance of Lisp code to get fairly close to the performance of C code.
Technologies to make Lisp code run fast typically involving translating it into
a lower-level language (including Machine Language) before running it. These
strategies are explained further in [[https://github.com/GregDavidson/on-computing/blob/main/Writings/2023/running-code.org][Running Code]].

Typically more than 90% of the code in a large software application has little
impact on the overall performance of the program. Optimizing the wrong parts of
a program are a waste of effort and can add complexity which is the enemy of the
evolution (and maintenance) of the system. Yet it's often difficult to determine
which parts of a program are worth optimizing or how.

/Profilers/ monitor your program as it performs its tasks, helping you find its
/Hot Spots/, i.e. those small parts of your code which consume the most critical
resources at the most critical times. You can use profiling data to show you
where to put your efforts at optimizing your program's performance.

The only way to profoundly improve your program is through redesigning the
inefficient parts to use better
- Computational Strategies
- Data Flow
- Algorithms
- Data Structures
- Heuristics
- Libraries
These topics are at least as important to study as languages!

When it's difficult to improve your program's design, you may want to assess how
different language implementations compare in efficiency for your kind of code.
You can find some interesting benchmarks at [[https://benchmarksgame-team.pages.debian.net/benchmarksgame][The Computer Language Benchmarks
Game]]. Be sure to read the caveats [[https://benchmarksgame-team.pages.debian.net/benchmarksgame/why-measure-toy-benchmark-programs.html][about Toy Benchmark Programs]] and [[https://benchmarksgame-team.pages.debian.net/benchmarksgame/sometimes-people-just-make-up-stuff.html][some
experience from history]]. Small differences in performance probably don't matter
as benchmark programs are not usually directly comparable but differences of
more than a factor of 10 are worth paying attention to.

** Interactive Lisp uses a (P)REPL

Batch development style
1. Edit your code as a text file with a text editor
2. Run a compiler to translate the whole file to a machine language program
3. Run the machine language program
4. Observe its deficiencies
5. Go to Step 1

Lisp allows for a more interactive style
- with a (P)REPL
- (Prompt) Read Eval Print Loop session
- The (Prompt) is usually not mentioned, so =REPL=

#+begin_src racket
  >                                   ; Prompt for expression
  > (+ 1 (* 3 4) 5)                   ; Read expression
  ;; Eval of symbols gets their values from the environment
  ;; '+ to procedure for addition
  ;; '* to procedure for multiplcation
  ;; Eval of other atoms simply returns them as themselves
  ;; '1 to 1, '3 to 3, '4 to 4, '5 to 5
  ;; Eval calls apply to run procedures
  ;; apply multiplication procedure to arguments
  ;; apply addition procedure to arguments
  18                                  ; Print result
  >                                   ; Prompt (loop for next expression)
#+end_src
- =eval= calls itself recursively on nested expressions
- such as =(* 3 4)= in this example

** =eval= and =apply= Call Each Other Recursively

#+begin_src racket
  > (quote (+ 1 (* 3 4) 5))           ; quote returns its argument unevaluated
  (+ 1 (* 3 4) 5)
  > (apply + '(1 2 3 4 5 6))
  21
  > (map eval '(+ 1 (* 3 4) 5))
  (#<procedure:+> 1 12 5)
  > ( (lambda (x y) (+ (* x x) (* y y)) ) 3 4 )
  25
#+end_src
Details of the last piece:
- =eval= of =( (lambda (x y) (+ (* x x) (* y y)) ) 3 4 )=
- This is a Form (an executable List) of 3 elements
- =eval= will recursively evaluate each element
- =(lambda (x y) (+ (* x x) (* y y)) )= evaluates to a procedure
      - a procedure which expects 2 arguments
      - to supply values for parameters =x= and =y=
      - in the evaluation of =(+ (* x x) (* y y))=
- =3= and =4= evaluate to themselves
- =eval= calls =apply= to apply the procedure to the arguments
- =apply= creates a (nested local) environment with
      - =x= bound to 3
      - =y= bound to 4
- =apply= calls =eval= on =(+ (* x x) (* y y))= in that environment
- that's a new form, so =eval= evaluates each element
- ...
- do you see the whole process now?

** Procedures, Procedures, Procedures!

The reason something like
- =(hc-append 10 (circle 30) (rectangle 10 30))=
seems simple is because you can treat the procedures
- =hc=append= =circle= =rectangle= as /black boxes/
In reality
- All Procedures are Lambdas!
- It's recursive =eval= and =apply= until you reach
- primitive procedures written in machine language

Like everything else in Lisp. /procedures/ are /first class values/, i.e.
- they can be bound to a symbol
- they can be passed to a procedure as an argument
- they can be returned from a procedure as its computed value

Most Lisps allow /programs/ to be composed of multiple /modules/
- /modules/ consist of /procedure/ definitions
      - usually contained in separate files
- /source modules/ can be /compiled/ (translated) into /binary modules/
      - /binary modules/ are not directly human readable
      - generally in some lower-level language, e.g. machine language
- either kind of /module/ can be loaded into the /REPL/
- allowing /Interactive/ development of new modules
Lisp development platforms like /DrRacket/ and /Emacs/ are designed to support
this style of development.

** Syntactic Sugar: Form Macros

Like everything to do with syntax
- /Syntactic Sugar is superficial/
- the code may become prettier to humans
- its behavior and performance is exactly the same

/Form Macros/ create /Syntactic Sugar/ for /Forms/
- /Form Macros/ are usually just called /Macros/
- /Forms/ are /Lists/ which you can meaningfully =eval=

A /Form Macro/ is just a procedure which rewrites the /Form/
- This is called /Macro Expansion/
- A Form is an S-Expression
- Lisp is good at manipulating S-Exprs
- /Form Macros/ can be run early or late
      - Early is when your code is being
            - read, compiled, loaded or defined
      - late is when your code is being evaluated
- By running /Form Macros/ early
      - /Macro Expansion/ is never a hot-spot
      - It doesn't effect the performance of your program

Similarity of Compilation to /Macro Expansion/
- The forms of your program are translated to a lower-level language
- This is expensive, but is usually done early
- Therefore compilation doesn't slow your program's runtime performance

Main difference of Compilation vs. /Macro Expansion/
- Compilation can significantly improve runtime performance
- Easily 50 or more times speed improvement using optimized native code
- Macros don't typically affect performance at all
      - Unless your macros generate Lower-Level code!
      - Some Lisp Systems allow this!

Some examples of what macros can do:

I might want to do multiple things where the syntax only allows one thing, I can
use the =begin= macro:
- =(begin S-EXPR-1 S-EXPR-2 ... S-EXPR-N)=
to evaluate each S-EXPR- in turn and return the value of the last one. This is
just syntactic sugar for
- =( (lambda () S-EXPR-1 S-EXPR-2 ... S-EXPR-N) )=
A lot of Lisp syntactic sugar is just disguised /lambdas/!
- See [[lambda-sugar.rkt][Lambda Sugar]] for more examples.
Lambda is the /most/ important Lisp feature!

Really, go read [[lambda-sugar.rkt][Lambda Sugar]] right now before reading any further!

Macros can build on macros, so if I want to do several things, but only when
some condition is true, I use the =when= macro:
- =(when some-condition S-EXPR-1 S-EXPR-2 ... S-EXPR-N)=
- translates into =(if some-condition (begin S-EXPR-1 S-EXPR-2 ... S-EXPR-N) #f)=
- where again, =#f= is the Lisp atom for /false/.

Lisp purists suggest that programmers use macros /sparingly/. Although macros
don't slow programs down and can make programs prettier, they put a burden on
anyone reading the program later, since they have to understand what the macro
does in order to understand what the program is doing.

** Syntactic Sugar: Reader Macros

Lisp reads your Lisp code using the Lisp function =read=. You can arbitrarily
change Lisp's syntax by redefining or extending the =read= function! The Lisp
=print= function prints Lisp values in a form that makes sense for humans to
read /and/ a form which can be read back into your Lisp session with =read=. If
you change =read= or =print= you should change both of them so that this
symmetry is maintained.

=read= and =print= can extend the syntax of Lisp beyond /s-exprs/.
An example is the reader macro for quote (').
- =read= reads 'S-EXPR
- as =(quote S-EXPR)=
so we can quote /s-exprs/ more compactly.

Many Lisps provide a version of =print= which can read algebraic syntax, e.g.
reading =a+b+c= as =(+ a b c)= making Lisp look more like other languages.

Many new Lisp Programmers go through a phase of trying out alternative syntaxes
using reader macros, often making Lisp look like languages the programmers has
used before. The new programmer will often show off the new syntax with
excitement and feel that it improves their productivity. After getting more
experience with Lisp's regular syntax, most programmers discover that they like
it as much or better than such alternatives and abandon their fancy reader
macros!

** Lisp Lists and Pairs

Originally Lisp only had two kinds of atoms
- Symbols and Numbers
and only one way to put things together
- Pairs
Lisp still has Pairs, and in fact:
- Lisp /Lists/ are made of /Pairs/!

*** What Are Pairs?  How do they make Lists?

A Pair is just any two values joined together into one combined value.
- the procedure =cons= creates pairs
      - =(cons X Y)= returns a pair of the two values =X= and =Y=
      - /Pairs/ are also known as /cons cells/
- the procedure =car= will return the first element of a /Pair/
- the procedure =cdr= will return the first element of a /Pair/

Syntactically, Pair Literals are written as =(X . Y)=
- two values in parentheses separated by " . "
      - At least one space is required on each side of the "."

#+begin_src racket
  > (cons "yes" "no")
  ("yes" . "no")                          ; a pair of two strings
  > (cons 'hello 'bonjour)
  (hello . bonjour)                       ; a Pair of two Symbols
  > (cons 3.14159 'pi)
  (3.14159 . pi)
  > (cons (cons 'green 'orange) 'complementary-colors)
  ((green . orange) . complementary-colors)
  > (car ("yes" . "no"))
  "yes"
  > (cdr ("yes" . "no"))
  "no"
  > (car (cons (cons 'green 'orange) 'complementary-colors))
  (green . orange)
  > (cdr (cons (cons 'green 'orange) 'complementary-colors))
  complementary-colors
#+end_src

But what's going on here:
#+begin_src racket
  > (cons (cons 'yes 'no) 'maybe)
  (yes no . maybe)
  > (cons 'red (cons 'green (cons 'blue '())))
  (red green blue)
  > '(red . (green . (blue . ())))
  (red green blue)
#+end_src

Lisp's /Lists are just nested Pairs!/
- In a /Proper List/ the last =cdr= is '()
- otherwise it's an /Improper List/

So a /Proper List/ is either
- The Empty List, '()
- A Pair where
      - The =car= of the Pair is /the first element of the List/
      - The =cdr= of the Pair is /the rest of the List/
            - either '() or more /Nested Pairs/

So why do we do this?
- The full story is complicated, but here are two cool things

*** Pairs are fast to store in memory

In the Computer's Memory, a Pair is just two adjacent Words

A Lisp Pair aka Cons-Cell:
#+begin_quote
:   +-------------+-------------+                            \\
:   |     car     |     cdr     |                            \\
:   +-------------+.------------+                            \\
:   <-- 2 machine words wide  -->                            \\
#+end_quote
The =car= and the =cdr= can each hold any 1-word value
- such as a number or the value '() aka nil
- or the address of a larger object
      - aka a "link" or "pointer"
      - linked structures are non-contiguous
      - they can consist of chunks scattered all over memory!

A Lisp List is made of Pairs:
#+begin_quote
: +-----------+-----------+     +-----------+-----------+    \\
: | element-1 |    cdr--------->| element-2 |  cdr=()   |    \\
: +-----------+-----------+     +-----------+-----------+    \\
#+end_quote
- Each car holds (or points to) 1 list element.
- Each car either points to (holds the address of)
- another Pair or has the value () aka nil.

It's easy for Lists to grow /and to share storage/:
#+begin_src racket
  (define sequence1 '(20 40))
  (define sequence2 (cons 10 sequence1))
  (define sequence0 (cons 0 sequence1))
  (assert (eq? sequence1 (cdr sequence0)))
  (assert (eq? sequence1 (cdr sequence2)))
#+end_src

#+begin_quote
:              +---------+---------+                               \\
: sequence0--->|    0    |   cdr   |                               \\
:              +---------+----v----+                               \\
:                             /                                    \\
:                   /---------                                     \\
:                   v                                              \\
:              +---------+---------+      +---------+---------+    \\
: sequence1--->|   20    |   cdr--------->|   40    | cdr=()  |    \\
:              +---------+---------+      +---------+---------+    \\
:                   ^                                              \\
:                   ^---------+                                    \\
:                             ^                                    \\
:              +---------+----^----+                               \\
: sequence2--->|   10    |   cdr   |                               \\
:              +---------+---------+                               \\
#+end_quote

As long as Lists grow by adding new Pairs at the /front/
- nothing already allocated needs to be copied
- shared storage is not observable

In most Lisps
- the =cons= and =cdr= parts of a Pair can be modified at runtime
- which can mess up shared storage and comprehensibility
- /this is discouraged by modern Lisp programmers - but still possible!/

In Racket
- Regular Pairs /cannot/ be modified, once created
- An alternative data structure, Mutable Pairs, is provided
- Racket's Mutable Pairs work analogously to Pairs but use the procedures
      - =mcons=, =mcar=, =mcdr= instead of =cons=, =car=, =cdr=
      - =set-mcar!= modifies the mcar of a Modifiable Pair
      - =set-mcdr!= modifies the mcdr of an  Modifiable Pair

Modifiable Pairs are rarely needed and it's nice that Racket allows them
without making regular Pairs - and therefore Lists, vulnerable to modifcation!

** Other Data Structures

Computer Science has distinguished a great variety of
- [[https://en.wikipedia.org/wiki/Data_structure][Data Structures]]
- for efficiently representing and processing data of all kinds

Lisp has a few features and some conventions which allow lisp programmers to
efficiently leverage all of these useful abstractions.

Lisp's Data Structures are very high level.  If you want to understand what
that high level is resting on, read these two short articles:
- [[https://gregdavidson.github.io/on-computing/what-computers-are/][What Computers Are]]
- [[https://github.com/GregDavidson/on-computing/blob/main/composites.org][Composite Data Structures]]

*** Lisp Vectors (aka 1-Dimensional Arrays)

As wonderful as Lists are, they have a few flaws
- They "waste" half of the storage with the =cdr= links
- It's expensive to count the number of elements in a list
- It's expensive to access elements out-of-order (random access)
- Modern machines are faster at accessing values stored adjacent in memory
      - A List's Cons-Cells can be scattered all over memory

Modern Lisps all provide a =vector= type.
- It's technically an =atom type= so it can't be used for forms
- For storing data, it can be more efficient than a List
- /Vectors/ use different syntax and procedures from /Lists/

The detailed syntax and semantics of /Vectors/ is different in different Lisp
families but is usually pretty straightforward: [[https://docs.racket-lang.org/guide/vectors.html][Vectors in the Racket Guide]]

**** A few examples:

In Scheme, Racket and Common Lisp
- Vector literals =#(look like this)= - a list with a hash
- =vector= creates a vector like =list= creates lists

In Clojure
- =[Vector literals use square brackets]=

In Scheme and Racket
- =(vector-length V)= efficiently computes the length of a vector
- =(vector-ref V N)= efficiently accesses element =N= of vector =V=

*** Collections and Sequences

A /Collection/ is a Data Structure for storing multiple elements.
- You can add or remove elements from a collection
- You can select subsets of a collection
- You can perform operations on all or some elements in a collection
- Elements of a Collection aren't necessarily ordered
      - operations on multiple elements may occur in any order

A Sequence is something which will
- Provide values on demand
- In some particular order
- Sequences are /not necessarily/ available more than once!
      - If they are revisitable, the order will be preserved

      Lists and Arrays provide both Collection and Sequence functionality

- Modern Lisps typically provide additional Collection Data Structures
      - Hash Tables (see below) are popular

- Modern Lisps typically provide additional Sequence Data Structures
      - Strings are like vectors but only for characters
      - Ports are sequences of characters, mostly used for I/O
      - Generators are procedures which can return multiple values
            - Generators can be built out of Lambdas!

*** Lisp Sequence Abstractions

In many programming language cultures it's common for programmers to use many
custom data structures for collections and sequences because of slight
differences in efficiency or other reasons. It has long been common for such
cultures to criticize Lisp Programmers' tendency to use Lists for everything.

This is what the prominent computer scientist Alan Perlis said in defense of
the seeming overuse of Lists in Lisp Cuture:
#+begin_quote
It is better to have 100 functions operate on one data structure than 10
functions on 10 data structures.
#+end_quote

Since that time, there have been some innovations which have been changing
practices in all programming communities.

[[https://en.wikipedia.org/wiki/Generic_programming][Generic Programming]] features have been added to popular statically typed
languages such as in C++, Java, Rust, etc. to allow a programmer to define a for
a procedure or Data Structure without specifying the data types of some of the
argument or elements. The compiler creates specific versions of these Generic
Entities as needed. This allows for good programmer productivity and runtime
speed at the expense of an increase in memory usage for multiple specific
versions of the same entities.

Lisp Programmers increasingly use Sequence types other than Lists but don't want
to have to manually write a whole new suite of procedures to operate on them.
The simple solution is to provide some generic procedures for accessing the
elements of any kind of Sequence without having to know the details.

While it's easy to define such an abstraction in any Lisp, for convenience,
efficiency and portability Racket provides two such mechanisms:
- [[https://docs.racket-lang.org/reference/sequences_streams.html][Sequences and Streams]]

*** Lisp Trees and Graphs

Lists are a bit boring, since they're just a linear sequence of values. Pairs
can be used to create much more diverse structures! All of the exotic Data
Structures known to Computer Science can be created out of Lisps's Pairs (For
efficiency we sometimes vectors as well.)

Most advanced Data Structures are either
- [[https://en.wikipedia.org/wiki/Tree_(data_structure)][Trees]] or [[https://en.wikipedia.org/wiki/Graph_(abstract_data_type)][General Graphs]]
- /Trees are just Graphcs with the restriction of no cycles/
- [[https://en.wikipedia.org/wiki/Category:Trees_(data_structures)][Wikipedia Category for Tree Data Structures]]
 
*** Lisp Hash Tables

One powerful Data Structure which stands out as distinctly different from Lists,
Vectors, Records, Trees and Graph Structures is the /Hash Table/. You can
actually make them from /Vectors/, but they have very special semantics.

TL;dr: Study the [[https://docs.racket-lang.org/guide/hash-tables.html][Racket Hash Table]] guide!

*** Yes, but how do they work?

Read [[https://en.wikipedia.org/wiki/Hash_table][Wikipedia on Hash Tables]] and look at the diagrams!

Hash tables are easy to implement in any Lisp which provides a vector type, but
for convenience, efficiency and portability (those words again) most modern
Lisps provide them as a built-in feature.

Many other dynamic languages, e.g. JavaScript, use Hash Tables for almost
everything - kind of like how Lisp programmers use Lists for almost everything.
Whenever you say either =myobject.someKey= or =myobject[someExpression]= in
JavaScript, you're actually doing a Hash Lookup, but the weird hash function
(they're always weird) and underlying vector are hidden from you!

** Built-In and library-Provided Atom Types and Procedures

Learning Lisp is easier than learning most computer programming languages
because of its simple syntax and semantics. Once you've learned one Lisp, it's
especially easy to learn another Lisp. However, there's more to learn than
the language itself.

You have to understand the rich variety of atom types and procedures which a
Lisp provides in its standard profile and which are available from its
libraries. When you're studying code written by others you may have a lot of
things to track down in order to understand how that code works.

Each atom type has a syntax which will be read by the =read= procedure. For
example, /character Strings/ are enclosed in double quotes, with a special
/escape syntax/ for embedded special characters. The various kinds of numbers
generally have the same syntax as other languages, except that many Lisps
include more kinds of numbers, e.g. rationals and complex numbers. The =print=
procedure also has to know that syntax so that it can print them properly. In
Racket's /Slideshow Language/ =print= knows how to print pictures.

In addition to (usually) building in a lot of powerful atom types and procedures
which might be useful in your programs, your Lisp will come with lots of
libraries which bring in new atom types and powerful procedures. You will need
to study the documentation for any built-in features or libraries you use. Your
development environment, e.g. DrRacket or Emacs will usually provide a handy
mechanism for going from any unfamiliar entity in your source code to the place
in your Lisp's documentation which defines that construct or procedure.

** Would you like to learn more about Lisp?

Read [[lisp-systems.org][Lisp Systems]]

Study the [[vis-mce.rkt][Meta-Circular Interpreter]] which defines Lisp in Lisp!

Join a [[https://github.com/GregDavidson/computing-magic][Computing Magic]] study group?

Ask questions!
